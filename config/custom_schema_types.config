/**
* This custom schema namespace implements a custom type for checking input BAMs for call-gSNP
*/
custom_schema_types {
    allowed_input_types = [
        'BAM'
    ]
    allowed_bam_types = [
        'normal',
        'tumor'
    ]
    allowed_resource_types = [
        'memory',
        'cpus'
    ]

    /**
    *   Check if given input is valid process list
    */
    check_if_process_list = { val, String name ->
        if (custom_schema_types.is_string(val)) {
            if (val.isEmpty()) {
                throw new Exception("Empty string specified for ${name}. Please provide valid input.")
            }
        } else {
            try {
                custom_schema_types.check_if_list(val, name)
            } catch(Exception e) {
                throw new Exception("${name} should be either a string or a list. Please provide valid input.")
            }
        }
    }

    /**
    *   Check namespace for resource updates
    */
    check_resource_update_namespace = { Map options, String name, Map properties ->
        custom_schema_types.check_if_namespace(options[name], name)
        def given_keys = options[name].keySet() as ArrayList
        if (given_keys.size() <= 0) {
            return
        }
        custom_schema_types.check_input_type_keys(given_keys, name, custom_schema_types.allowed_resource_types)

        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements[entry.key])
        }
    }

    /**
    *   Check list of resource updates
    */
    check_resource_update_list = { Map options, String name, Map properties ->
        custom_schema_types.check_if_list(options[name], name)
        for (item in options[name]) {
            custom_schema_types.check_if_process_list(item[0], name)
            custom_schema_types.check_if_number(item[1], name)
        }
    }

    /**
    * Check aligner and version
    */
    check_aligner = { Map options, String name, Map properties ->
        schema.primitive_check_type(options, name, 'String')
        if (!(options[name] ==~ /(BWA-MEM2|HISAT2)-[\d\.]+/)) {
            throw new Exception("Invalid value for parameter ${name}: ${options[name]}. Please check and make sure the proper aligner is provided.")
        }
    }

    types = [
        'AlignerTool': custom_schema_types.check_aligner,
        'ResourceUpdateNamespace': custom_schema_types.check_resource_update_namespace,
        'ResourceUpdateList': custom_schema_types.check_resource_update_list
    ]
}
