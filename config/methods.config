import nextflow.util.SysHelper
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/csv/csv_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/retry/retry.config"

methods {
    // Function to ensure that resource requirements don't go beyond
    // a maximum limit or below a minimum limit
    check_limits = { obj, type ->
        if (type == 'memory') {
            try {
                if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                    return params.max_memory as nextflow.util.MemoryUnit
                else if (obj.compareTo(params.min_memory as nextflow.util.MemoryUnit) == -1)
                    return params.min_memory as nextflow.util.MemoryUnit
                else
                    return obj
            } catch (all) {
                println "   ### WARNING ###   Max memory '${params.max_memory}' or min memory '${params.min_memory}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'time') {
            try {
                if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                    return params.max_time as nextflow.util.Duration
                else if (obj.compareTo(params.min_time as nextflow.util.Duration) == -1)
                    return params.min_time as nextflow.util.Duration
                else
                    return obj
            } catch (all) {
                println "   ### WARNING ###   Max time '${params.max_time}' or min time '${params.min_time}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'cpus') {
            try {
                return Math.max( Math.min( obj, params.max_cpus as int ), params.min_cpus as int )
            } catch (all) {
                println "   ### WARNING ###   Max cpus '${params.max_cpus}' or min cpus '${params.min_cpus}' is not valid! Using default value: $obj"
                return obj
            }
        }
    }

    set_log_output_dir = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.log_output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.patient_id}/log-${manifest.name}-${manifest.version}-${date}"
    }

    set_output_dir = {
        params.output_dir_base = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.patient_id}/${params.docker_image_gatk.split("/")[1].replace(':', '-').toUpperCase()}"
    }

    /**
     * Check the permissions and existence of workDir.
     * If it doesn't exist, recursively find first existing directory and check write permission.
     * If it exists, check write permission.
     */
    check_workdir_permissions = { dir ->
        dir_file = new File(dir)
        if (dir_file.exists()) {
            if (dir_file.canWrite()) {
                return true
            } else {
                throw new Exception("   ### ERROR ###   The input directory params.work_dir: ${dir} is not writeable. Please verify and try again.")
            }
        } else {
            while (!dir_file.exists()) {
                dir_file = dir_file.getParentFile()
            }

            if (dir_file.canWrite()) {
                return true
            } else {
                throw new Exception("   ### ERROR ###   The input directory params.work_dir: ${dir} cannot be created. The closest existing parent directory ${dir_file.toString()} is not writable. Please verify permissions or change the input parameter.")
            }
        }
    }

    set_env = {
        if (params.ucla_cds) {
            /**
             * By default, if the /scratch directory exists, set it as the Nextflow working directory
             * If config file specified work_dir, set it as the Nextflow working directory
             *
             * WARNING: changing this directory can lead to high server latency and
             * potential disk space limitations. Change with caution! The 'workDir'
             * in Nextflow determines the location of intermediate and temporary files.
             */
            params.work_dir = (params.containsKey('work_dir') && params.work_dir) ? params.work_dir : '/scratch'
            if (methods.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            }
        } else {
            // If work_dir was specified as a param and exists or can be created, set workDir. Otherwise, let Nextflow's default behavior dictate workDir
            if (params.containsKey('work_dir') && params.work_dir && methods.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            }
        }
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }

    set_process = {
        process.cache = params.cache_intermediate_pipeline_steps
    }

    detect_mode = {
        // Detect whether job is for targeted sample
        params.is_targeted = (params.containsKey('intervals') && params.intervals) ? true : false
    }

    set_ids_from_bams = {
        params.samples_to_process = [] as Set
        params.input.BAM.each { k, v ->
            v.each { bam_path ->
                def bam_header = bam_parser.parse_bam_header(bam_path)
                def sm_tags = bam_header['read_group'].collect{ it['SM'] }.unique()

                if (sm_tags.size() != 1) {
                    throw new Exception("${bam_path} contains multiple samples! Please run pipeline with single sample BAMs.")
                }

                params.samples_to_process.add(['id': sm_tags[0], 'path': bam_path, 'sample_type': k])
            }
        }
    }

    set_allocation = {
        // Set base and node-specific allocations
        methods.set_resources_allocation()

        def node_memory_GB = SysHelper.getAvailMemory().toGiga()

        def num_samples = params.samples_to_process.size()

        // Divide memory per sample, with a minimum of 20% of total memory
        def mem_to_allocate = Math.max(node_memory_GB * 0.2, (node_memory_GB * 0.9) / num_samples)

        def processes_to_parallelize_per_sample = [
            'run_BaseRecalibrator_GATK',
            'run_MergeSamFiles_Picard',
            'deduplicate_records_SAMtools'
        ]

        def processes_to_parallelize_per_half_sample = [
            'run_GetPileupSummaries_GATK',
            'run_CalculateContamination_GATK',
            'run_DepthOfCoverage_GATK'
        ]

        processes_to_parallelize_per_sample.each { p ->
            process["withName:${p}"].memory = "${ mem_to_allocate } GB" as nextflow.util.MemoryUnit
        }

        processes_to_parallelize_per_half_sample.each { p ->
            process["withName:${p}"].memory = "${ mem_to_allocate / 2 } GB" as nextflow.util.MemoryUnit
        }
    }

    verify_input_deletion = {
        if (!params.containsKey('metapipeline_final_output_dir')) {
            params.metapipeline_delete_input_bams = false
        }
    }

    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    setup = {
        methods.set_env()
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        methods.set_ids_from_bams()
        methods.set_allocation()
        methods.modify_base_allocations()
        methods.set_log_output_dir()
        methods.set_output_dir()
        methods.set_pipeline_logs()
        methods.set_process()
        methods.detect_mode()
        retry.setup_retry()
        methods.setup_docker_cpus()
        methods.verify_input_deletion()
    }
}
